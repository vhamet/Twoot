@mixin menu__listitem {
  li {
    list-style: none;
    margin: 0.4rem 0;
    padding: 0.2rem 2rem;
    height: 1.8rem;
    cursor: pointer;
    box-sizing: border-box;

    a,
    label {
      color: $grey-label-darkest;
      background: transparent;
      border: none;
      outline: none;
      text-decoration: none;
      font-size: 0.7rem;
      font-weight: 400;
      margin: 0;
      padding: 0;
      cursor: pointer;
      color: $color-black;
    }

    &:hover {
      background: $main-color-dark;
      border-top: 1px solid $border-color-dark;
      border-bottom: 1px solid $border-color-dark;

      a,
      label,
      svg {
        color: $color-white;
      }
    }
  }
}

@function opposite-direction($directions) {
  $opposite-directions: ();
  $direction-map: (
    'top':    'bottom',
    'right':  'left',
    'bottom': 'top',
    'left':   'right',
    'center': 'center',
    'ltr':    'rtl',
    'rtl':    'ltr'
  );
 
  @each $direction in $directions {
    $direction: to-lower-case($direction);
    
    @if map-has-key($direction-map, $direction) { 
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    } @else {
      @warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
    }
  }
 
  @return $opposite-directions;
}

@mixin triangle($direction, $color: black, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;
  
  $perpendicular-borders: $size solid transparent;
  
  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}

@mixin for-size($range) {
  $phone-lower-boundary: 450px;
  $phone-upper-boundary: 600px;
  $tablet-portrait-upper-boundary: 900px;
  $tablet-landscape-upper-boundary: 1200px;
  $desktop-upper-boundary: 1800px;

  @if $range == phone-portrait-only {
    @media (max-width: #{$phone-lower-boundary - 1}) { @content; }
  } @else if $range == phone-only {
    @media (max-width: #{$phone-upper-boundary - 1}) { @content; }
  } @else if $range == tablet-portrait-up {
    @media (min-width: $phone-upper-boundary) { @content; }
  } @else if $range == tablet-landscape-up {
    @media (min-width: $tablet-portrait-upper-boundary) { @content; }
  } @else if $range == desktop-up {
    @media (min-width: $tablet-landscape-upper-boundary) { @content; }
  } @else if $range == big-desktop-up {
    @media (min-width: $desktop-upper-boundary) { @content; }
  }
}
