scalar DateTime

type Query {
  info: String!
  feed(first: Int, after: ID, logged: ID): Feed!
  timeline(user: ID, first: Int, after: ID, logged: ID): Feed!
  moreComments(postId: ID, last: Int, before: ID): [Comment!]!
  user(id: ID!): User
}

type Mutation {
  signup(email: String!, password: String!, username: String!): AuthPayload
  login(login: String!, password: String!): AuthPayload
  createPost(content: String!, isPrivate: Boolean!): Post!
  createComment(postId: ID!, content: String!): Comment!
  follow(followId: ID!): Boolean
  unfollow(followId: ID!): Boolean
  likePost(postId: ID!):Boolean
  unlikePost(postId: ID!):Boolean
  likeComment(commentId: ID!):Boolean
  unlikeComment(commentId: ID!):Boolean
}

type FetchedComments {
  comments: [Comment!]!
  count: Int
}

type Feed {
  posts: [Post!]!
  cursor: ID
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  username: String!
  email: String!
  avatar: String
  posts: [Post!]!
  comments: [Comment!]!
  following: [User!]!
  followers: [User!]!
}

type Post {
  id: ID!
  content: String!
  postedBy: User!
  createdAt: DateTime!
  fetchedComments: FetchedComments
  isPrivate: Boolean
  likes: [User!]!
}

type Comment {
  id: ID!
  content: String!
  postedOn: Post!
  postedBy: User!
  createdAt: DateTime!
  likes: [User!]!
}