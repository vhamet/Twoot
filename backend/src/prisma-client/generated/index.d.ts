// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  alert: (where?: AlertWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  alert: (where: AlertWhereUniqueInput) => AlertPromise;
  alerts: (args?: {
    where?: AlertWhereInput;
    orderBy?: AlertOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Alert>;
  alertsConnection: (args?: {
    where?: AlertWhereInput;
    orderBy?: AlertOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AlertConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAlert: (data: AlertCreateInput) => AlertPromise;
  updateAlert: (args: {
    data: AlertUpdateInput;
    where: AlertWhereUniqueInput;
  }) => AlertPromise;
  updateManyAlerts: (args: {
    data: AlertUpdateManyMutationInput;
    where?: AlertWhereInput;
  }) => BatchPayloadPromise;
  upsertAlert: (args: {
    where: AlertWhereUniqueInput;
    create: AlertCreateInput;
    update: AlertUpdateInput;
  }) => AlertPromise;
  deleteAlert: (where: AlertWhereUniqueInput) => AlertPromise;
  deleteManyAlerts: (where?: AlertWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  alert: (
    where?: AlertSubscriptionWhereInput
  ) => AlertSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "isPrivate_ASC"
  | "isPrivate_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AlertOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "seen_ASC"
  | "seen_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithWhereUniqueWithoutLikedPostsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutLikedPostsDataInput;
}

export type AlertWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpdateWithoutPostedByDataInput {
  content?: String;
  comments?: CommentUpdateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  likes?: UserUpdateManyWithoutLikedPostsInput;
  postedOn?: UserUpdateOneWithoutTimelinePostsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  following_every?: UserWhereInput;
  following_some?: UserWhereInput;
  following_none?: UserWhereInput;
  followers_every?: UserWhereInput;
  followers_some?: UserWhereInput;
  followers_none?: UserWhereInput;
  likedPosts_every?: PostWhereInput;
  likedPosts_some?: PostWhereInput;
  likedPosts_none?: PostWhereInput;
  likedComments_every?: CommentWhereInput;
  likedComments_some?: CommentWhereInput;
  likedComments_none?: CommentWhereInput;
  timelinePosts_every?: PostWhereInput;
  timelinePosts_some?: PostWhereInput;
  timelinePosts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PostUpdateOneInput {
  create?: PostCreateInput;
  update?: PostUpdateDataInput;
  upsert?: PostUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PostWhereUniqueInput;
}

export interface PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPostedByDataInput;
  create: PostCreateWithoutPostedByInput;
}

export interface PostUpdateDataInput {
  content?: String;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  comments?: CommentUpdateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  likes?: UserUpdateManyWithoutLikedPostsInput;
  postedOn?: UserUpdateOneWithoutTimelinePostsInput;
}

export interface CommentUpdateManyWithoutPostedOnInput {
  create?:
    | CommentCreateWithoutPostedOnInput[]
    | CommentCreateWithoutPostedOnInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutPostedOnInput[]
    | CommentUpdateWithWhereUniqueWithoutPostedOnInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutPostedOnInput[]
    | CommentUpsertWithWhereUniqueWithoutPostedOnInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateWithoutPostsDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  comments?: CommentUpdateManyWithoutPostedByInput;
  following?: UserUpdateManyWithoutFollowingInput;
  followers?: UserUpdateManyWithoutFollowersInput;
  likedPosts?: PostUpdateManyWithoutLikesInput;
  likedComments?: CommentUpdateManyWithoutLikesInput;
  timelinePosts?: PostUpdateManyWithoutPostedOnInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface CommentUpdateManyWithoutPostedByInput {
  create?:
    | CommentCreateWithoutPostedByInput[]
    | CommentCreateWithoutPostedByInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutPostedByInput[]
    | CommentUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutPostedByInput[]
    | CommentUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface AlertWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  onPost?: PostWhereInput;
  onComment?: CommentWhereInput;
  seen?: Boolean;
  seen_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: AlertWhereInput[] | AlertWhereInput;
  OR?: AlertWhereInput[] | AlertWhereInput;
  NOT?: AlertWhereInput[] | AlertWhereInput;
}

export interface CommentUpdateWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostedByDataInput;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutPostedByInput;
  following?: UserUpdateManyWithoutFollowingInput;
  followers?: UserUpdateManyWithoutFollowersInput;
  likedPosts?: PostUpdateManyWithoutLikesInput;
  likedComments?: CommentUpdateManyWithoutLikesInput;
  timelinePosts?: PostUpdateManyWithoutPostedOnInput;
}

export interface CommentUpdateWithoutPostedByDataInput {
  content?: String;
  postedOn?: PostUpdateOneRequiredWithoutCommentsInput;
  likes?: UserUpdateManyWithoutLikedCommentsInput;
}

export interface PostUpdateManyMutationInput {
  content?: String;
  isPrivate?: Boolean;
}

export interface PostUpdateOneRequiredWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput;
  update?: PostUpdateWithoutCommentsDataInput;
  upsert?: PostUpsertWithoutCommentsInput;
  connect?: PostWhereUniqueInput;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpdateWithoutCommentsDataInput {
  content?: String;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  isPrivate?: Boolean;
  likes?: UserUpdateManyWithoutLikedPostsInput;
  postedOn?: UserUpdateOneWithoutTimelinePostsInput;
}

export interface CommentUpdateInput {
  content?: String;
  postedOn?: PostUpdateOneRequiredWithoutCommentsInput;
  postedBy?: UserUpdateOneRequiredWithoutCommentsInput;
  likes?: UserUpdateManyWithoutLikedCommentsInput;
}

export interface UserUpdateManyWithoutLikedPostsInput {
  create?:
    | UserCreateWithoutLikedPostsInput[]
    | UserCreateWithoutLikedPostsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutLikedPostsInput[]
    | UserUpdateWithWhereUniqueWithoutLikedPostsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutLikedPostsInput[]
    | UserUpsertWithWhereUniqueWithoutLikedPostsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpdateDataInput {
  content?: String;
  postedOn?: PostUpdateOneRequiredWithoutCommentsInput;
  postedBy?: UserUpdateOneRequiredWithoutCommentsInput;
  likes?: UserUpdateManyWithoutLikedCommentsInput;
}

export interface UserUpdateWithoutLikedPostsDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutPostedByInput;
  following?: UserUpdateManyWithoutFollowingInput;
  followers?: UserUpdateManyWithoutFollowersInput;
  likedComments?: CommentUpdateManyWithoutLikesInput;
  timelinePosts?: PostUpdateManyWithoutPostedOnInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export interface PostUpdateManyWithoutPostedByInput {
  create?: PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutPostedByInput[]
    | PostUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutPostedByInput[]
    | PostUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPostedByDataInput;
}

export interface PostCreateOneInput {
  create?: PostCreateInput;
  connect?: PostWhereUniqueInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  postedOn?: PostWhereInput;
  postedBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  likes_every?: UserWhereInput;
  likes_some?: UserWhereInput;
  likes_none?: UserWhereInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutLikedPostsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutLikedPostsDataInput;
  create: UserCreateWithoutLikedPostsInput;
}

export interface CommentCreateManyWithoutPostedByInput {
  create?:
    | CommentCreateWithoutPostedByInput[]
    | CommentCreateWithoutPostedByInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentUpdateWithWhereUniqueWithoutPostedOnInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostedOnDataInput;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput;
  connect?: PostWhereUniqueInput;
}

export interface CommentUpdateWithoutPostedOnDataInput {
  content?: String;
  postedBy?: UserUpdateOneRequiredWithoutCommentsInput;
  likes?: UserUpdateManyWithoutLikedCommentsInput;
}

export interface UserCreateManyWithoutLikedPostsInput {
  create?:
    | UserCreateWithoutLikedPostsInput[]
    | UserCreateWithoutLikedPostsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  update?: UserUpdateWithoutCommentsDataInput;
  upsert?: UserUpsertWithoutCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface PostCreateManyWithoutPostedByInput {
  create?: PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface UserUpdateWithoutCommentsDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
  following?: UserUpdateManyWithoutFollowingInput;
  followers?: UserUpdateManyWithoutFollowersInput;
  likedPosts?: PostUpdateManyWithoutLikesInput;
  likedComments?: CommentUpdateManyWithoutLikesInput;
  timelinePosts?: PostUpdateManyWithoutPostedOnInput;
}

export interface CommentCreateManyWithoutPostedOnInput {
  create?:
    | CommentCreateWithoutPostedOnInput[]
    | CommentCreateWithoutPostedOnInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutPostedByInput;
  followers?: UserUpdateManyWithoutFollowersInput;
  likedPosts?: PostUpdateManyWithoutLikesInput;
  likedComments?: CommentUpdateManyWithoutLikesInput;
  timelinePosts?: PostUpdateManyWithoutPostedOnInput;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface PostCreateManyWithoutLikesInput {
  create?: PostCreateWithoutLikesInput[] | PostCreateWithoutLikesInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserCreateOneWithoutTimelinePostsInput {
  create?: UserCreateWithoutTimelinePostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutPostedByInput;
  following?: UserUpdateManyWithoutFollowingInput;
  likedPosts?: PostUpdateManyWithoutLikesInput;
  likedComments?: CommentUpdateManyWithoutLikesInput;
  timelinePosts?: PostUpdateManyWithoutPostedOnInput;
}

export interface CommentCreateManyWithoutLikesInput {
  create?: CommentCreateWithoutLikesInput[] | CommentCreateWithoutLikesInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface PostUpdateManyWithoutLikesInput {
  create?: PostCreateWithoutLikesInput[] | PostCreateWithoutLikesInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutLikesInput[]
    | PostUpdateWithWhereUniqueWithoutLikesInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutLikesInput[]
    | PostUpsertWithWhereUniqueWithoutLikesInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostCreateManyWithoutPostedOnInput {
  create?: PostCreateWithoutPostedOnInput[] | PostCreateWithoutPostedOnInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostUpdateWithWhereUniqueWithoutLikesInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutLikesDataInput;
}

export interface UserCreateManyWithoutLikedCommentsInput {
  create?:
    | UserCreateWithoutLikedCommentsInput[]
    | UserCreateWithoutLikedCommentsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface PostUpdateWithoutLikesDataInput {
  content?: String;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  comments?: CommentUpdateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  postedOn?: UserUpdateOneWithoutTimelinePostsInput;
}

export interface CommentCreateOneInput {
  create?: CommentCreateInput;
  connect?: CommentWhereUniqueInput;
}

export interface UserUpdateOneWithoutTimelinePostsInput {
  create?: UserCreateWithoutTimelinePostsInput;
  update?: UserUpdateWithoutTimelinePostsDataInput;
  upsert?: UserUpsertWithoutTimelinePostsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface AlertUpdateInput {
  onPost?: PostUpdateOneInput;
  onComment?: CommentUpdateOneInput;
  seen?: Boolean;
}

export interface UserUpdateWithoutTimelinePostsDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutPostedByInput;
  following?: UserUpdateManyWithoutFollowingInput;
  followers?: UserUpdateManyWithoutFollowersInput;
  likedPosts?: PostUpdateManyWithoutLikesInput;
  likedComments?: CommentUpdateManyWithoutLikesInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface CommentUpdateManyWithoutLikesInput {
  create?: CommentCreateWithoutLikesInput[] | CommentCreateWithoutLikesInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  update?:
    | CommentUpdateWithWhereUniqueWithoutLikesInput[]
    | CommentUpdateWithWhereUniqueWithoutLikesInput;
  upsert?:
    | CommentUpsertWithWhereUniqueWithoutLikesInput[]
    | CommentUpsertWithWhereUniqueWithoutLikesInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
}

export interface CommentUpdateWithWhereUniqueWithoutLikesInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutLikesDataInput;
}

export interface PostUpdateInput {
  content?: String;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  comments?: CommentUpdateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  likes?: UserUpdateManyWithoutLikedPostsInput;
  postedOn?: UserUpdateOneWithoutTimelinePostsInput;
}

export interface CommentUpdateWithoutLikesDataInput {
  content?: String;
  postedOn?: PostUpdateOneRequiredWithoutCommentsInput;
  postedBy?: UserUpdateOneRequiredWithoutCommentsInput;
}

export interface AlertUpdateManyMutationInput {
  seen?: Boolean;
}

export interface CommentUpsertWithWhereUniqueWithoutLikesInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutLikesDataInput;
  create: CommentCreateWithoutLikesInput;
}

export interface CommentUpdateOneInput {
  create?: CommentCreateInput;
  update?: CommentUpdateDataInput;
  upsert?: CommentUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CommentWhereUniqueInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostedByInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostedByDataInput;
  create: CommentCreateWithoutPostedByInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface PostCreateInput {
  content: String;
  postedBy: UserCreateOneWithoutPostsInput;
  comments?: CommentCreateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  likes?: UserCreateManyWithoutLikedPostsInput;
  postedOn?: UserCreateOneWithoutTimelinePostsInput;
}

export interface CommentUpdateManyDataInput {
  content?: String;
}

export interface CommentCreateWithoutPostedByInput {
  content: String;
  postedOn: PostCreateOneWithoutCommentsInput;
  likes?: UserCreateManyWithoutLikedCommentsInput;
}

export interface UserUpsertWithoutTimelinePostsInput {
  update: UserUpdateWithoutTimelinePostsDataInput;
  create: UserCreateWithoutTimelinePostsInput;
}

export interface UserCreateWithoutLikedPostsInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  posts?: PostCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutPostedByInput;
  following?: UserCreateManyWithoutFollowingInput;
  followers?: UserCreateManyWithoutFollowersInput;
  likedComments?: CommentCreateManyWithoutLikesInput;
  timelinePosts?: PostCreateManyWithoutPostedOnInput;
}

export interface PostUpsertWithWhereUniqueWithoutLikesInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutLikesDataInput;
  create: PostCreateWithoutLikesInput;
}

export interface CommentCreateWithoutPostedOnInput {
  content: String;
  postedBy: UserCreateOneWithoutCommentsInput;
  likes?: UserCreateManyWithoutLikedCommentsInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  isPrivate?: Boolean;
  isPrivate_not?: Boolean;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface UserCreateWithoutFollowingInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  posts?: PostCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutPostedByInput;
  followers?: UserCreateManyWithoutFollowersInput;
  likedPosts?: PostCreateManyWithoutLikesInput;
  likedComments?: CommentCreateManyWithoutLikesInput;
  timelinePosts?: PostCreateManyWithoutPostedOnInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostCreateWithoutLikesInput {
  content: String;
  postedBy: UserCreateOneWithoutPostsInput;
  comments?: CommentCreateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  postedOn?: UserCreateOneWithoutTimelinePostsInput;
}

export interface PostUpdateManyDataInput {
  content?: String;
  isPrivate?: Boolean;
}

export interface CommentCreateWithoutLikesInput {
  content: String;
  postedOn: PostCreateOneWithoutCommentsInput;
  postedBy: UserCreateOneWithoutCommentsInput;
}

export interface PostUpdateManyWithoutPostedOnInput {
  create?: PostCreateWithoutPostedOnInput[] | PostCreateWithoutPostedOnInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutPostedOnInput[]
    | PostUpdateWithWhereUniqueWithoutPostedOnInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutPostedOnInput[]
    | PostUpsertWithWhereUniqueWithoutPostedOnInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutLikedCommentsInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  posts?: PostCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutPostedByInput;
  following?: UserCreateManyWithoutFollowingInput;
  followers?: UserCreateManyWithoutFollowersInput;
  likedPosts?: PostCreateManyWithoutLikesInput;
  timelinePosts?: PostCreateManyWithoutPostedOnInput;
}

export interface PostUpdateWithWhereUniqueWithoutPostedOnInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPostedOnDataInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  postedBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  isPrivate?: Boolean;
  isPrivate_not?: Boolean;
  likes_every?: UserWhereInput;
  likes_some?: UserWhereInput;
  likes_none?: UserWhereInput;
  postedOn?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PostUpdateWithoutPostedOnDataInput {
  content?: String;
  postedBy?: UserUpdateOneRequiredWithoutPostsInput;
  comments?: CommentUpdateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  likes?: UserUpdateManyWithoutLikedPostsInput;
}

export interface UserCreateInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  posts?: PostCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutPostedByInput;
  following?: UserCreateManyWithoutFollowingInput;
  followers?: UserCreateManyWithoutFollowersInput;
  likedPosts?: PostCreateManyWithoutLikesInput;
  likedComments?: CommentCreateManyWithoutLikesInput;
  timelinePosts?: PostCreateManyWithoutPostedOnInput;
}

export interface PostUpsertWithWhereUniqueWithoutPostedOnInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPostedOnDataInput;
  create: PostCreateWithoutPostedOnInput;
}

export interface CommentUpsertNestedInput {
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface AlertCreateInput {
  onPost?: PostCreateOneInput;
  onComment?: CommentCreateOneInput;
  seen: Boolean;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface PostCreateWithoutCommentsInput {
  content: String;
  postedBy: UserCreateOneWithoutPostsInput;
  isPrivate?: Boolean;
  likes?: UserCreateManyWithoutLikedPostsInput;
  postedOn?: UserCreateOneWithoutTimelinePostsInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateWithoutCommentsInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  posts?: PostCreateManyWithoutPostedByInput;
  following?: UserCreateManyWithoutFollowingInput;
  followers?: UserCreateManyWithoutFollowersInput;
  likedPosts?: PostCreateManyWithoutLikesInput;
  likedComments?: CommentCreateManyWithoutLikesInput;
  timelinePosts?: PostCreateManyWithoutPostedOnInput;
}

export interface UserUpdateManyDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
}

export interface UserCreateWithoutTimelinePostsInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  posts?: PostCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutPostedByInput;
  following?: UserCreateManyWithoutFollowingInput;
  followers?: UserCreateManyWithoutFollowersInput;
  likedPosts?: PostCreateManyWithoutLikesInput;
  likedComments?: CommentCreateManyWithoutLikesInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface CommentCreateInput {
  content: String;
  postedOn: PostCreateOneWithoutCommentsInput;
  postedBy: UserCreateOneWithoutCommentsInput;
  likes?: UserCreateManyWithoutLikedCommentsInput;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  content?: String;
}

export interface UserUpdateManyWithoutLikedCommentsInput {
  create?:
    | UserCreateWithoutLikedCommentsInput[]
    | UserCreateWithoutLikedCommentsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutLikedCommentsInput[]
    | UserUpdateWithWhereUniqueWithoutLikedCommentsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutLikedCommentsInput[]
    | UserUpsertWithWhereUniqueWithoutLikedCommentsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutPostsInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  comments?: CommentCreateManyWithoutPostedByInput;
  following?: UserCreateManyWithoutFollowingInput;
  followers?: UserCreateManyWithoutFollowersInput;
  likedPosts?: PostCreateManyWithoutLikesInput;
  likedComments?: CommentCreateManyWithoutLikesInput;
  timelinePosts?: PostCreateManyWithoutPostedOnInput;
}

export interface CommentUpsertWithWhereUniqueWithoutPostedOnInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostedOnDataInput;
  create: CommentCreateWithoutPostedOnInput;
}

export interface UserUpsertWithWhereUniqueWithoutLikedCommentsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutLikedCommentsDataInput;
  create: UserCreateWithoutLikedCommentsInput;
}

export interface UserUpdateWithoutLikedCommentsDataInput {
  username?: String;
  email?: String;
  password?: String;
  avatar?: String;
  posts?: PostUpdateManyWithoutPostedByInput;
  comments?: CommentUpdateManyWithoutPostedByInput;
  following?: UserUpdateManyWithoutFollowingInput;
  followers?: UserUpdateManyWithoutFollowersInput;
  likedPosts?: PostUpdateManyWithoutLikesInput;
  timelinePosts?: PostUpdateManyWithoutPostedOnInput;
}

export interface UserUpdateWithWhereUniqueWithoutLikedCommentsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutLikedCommentsDataInput;
}

export interface PostCreateWithoutPostedByInput {
  content: String;
  comments?: CommentCreateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  likes?: UserCreateManyWithoutLikedPostsInput;
  postedOn?: UserCreateOneWithoutTimelinePostsInput;
}

export interface PostUpsertNestedInput {
  update: PostUpdateDataInput;
  create: PostCreateInput;
}

export interface AlertSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AlertWhereInput;
  AND?: AlertSubscriptionWhereInput[] | AlertSubscriptionWhereInput;
  OR?: AlertSubscriptionWhereInput[] | AlertSubscriptionWhereInput;
  NOT?: AlertSubscriptionWhereInput[] | AlertSubscriptionWhereInput;
}

export interface PostCreateWithoutPostedOnInput {
  content: String;
  postedBy: UserCreateOneWithoutPostsInput;
  comments?: CommentCreateManyWithoutPostedOnInput;
  isPrivate?: Boolean;
  likes?: UserCreateManyWithoutLikedPostsInput;
}

export interface UserCreateWithoutFollowersInput {
  username: String;
  email: String;
  password: String;
  avatar?: String;
  posts?: PostCreateManyWithoutPostedByInput;
  comments?: CommentCreateManyWithoutPostedByInput;
  following?: UserCreateManyWithoutFollowingInput;
  likedPosts?: PostCreateManyWithoutLikesInput;
  likedComments?: CommentCreateManyWithoutLikesInput;
  timelinePosts?: PostCreateManyWithoutPostedOnInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  avatar?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  avatar: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAlert {
  count: Int;
}

export interface AggregateAlertPromise
  extends Promise<AggregateAlert>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAlertSubscription
  extends Promise<AsyncIterator<AggregateAlert>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  avatar?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  avatar: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedPosts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedComments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  timelinePosts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedPosts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedComments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  timelinePosts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlertEdge {
  node: Alert;
  cursor: String;
}

export interface AlertEdgePromise extends Promise<AlertEdge>, Fragmentable {
  node: <T = AlertPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AlertEdgeSubscription
  extends Promise<AsyncIterator<AlertEdge>>,
    Fragmentable {
  node: <T = AlertSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  isPrivate?: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  isPrivate: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AlertConnection {
  pageInfo: PageInfo;
  edges: AlertEdge[];
}

export interface AlertConnectionPromise
  extends Promise<AlertConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AlertEdge>>() => T;
  aggregate: <T = AggregateAlertPromise>() => T;
}

export interface AlertConnectionSubscription
  extends Promise<AsyncIterator<AlertConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AlertEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAlertSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  isPrivate?: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPrivate: () => Promise<Boolean>;
  likes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postedOn: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPrivate: () => Promise<AsyncIterator<Boolean>>;
  likes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postedOn: <T = UserSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Alert {
  id: ID_Output;
  seen: Boolean;
  createdAt: DateTimeOutput;
}

export interface AlertPromise extends Promise<Alert>, Fragmentable {
  id: () => Promise<ID_Output>;
  onPost: <T = PostPromise>() => T;
  onComment: <T = CommentPromise>() => T;
  seen: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AlertSubscription
  extends Promise<AsyncIterator<Alert>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  onPost: <T = PostSubscription>() => T;
  onComment: <T = CommentSubscription>() => T;
  seen: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AlertSubscriptionPayload {
  mutation: MutationType;
  node: Alert;
  updatedFields: String[];
  previousValues: AlertPreviousValues;
}

export interface AlertSubscriptionPayloadPromise
  extends Promise<AlertSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AlertPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AlertPreviousValuesPromise>() => T;
}

export interface AlertSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AlertSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AlertSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AlertPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface Comment {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  postedOn: <T = PostPromise>() => T;
  postedBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  likes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  postedOn: <T = PostSubscription>() => T;
  postedBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  likes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlertPreviousValues {
  id: ID_Output;
  seen: Boolean;
  createdAt: DateTimeOutput;
}

export interface AlertPreviousValuesPromise
  extends Promise<AlertPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  seen: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AlertPreviousValuesSubscription
  extends Promise<AsyncIterator<AlertPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  seen: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Alert",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
